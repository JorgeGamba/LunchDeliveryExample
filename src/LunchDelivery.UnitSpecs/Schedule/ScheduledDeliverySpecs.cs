using System;
using System.Collections.Generic;
using Doing.BDDExtensions;
using FluentAssertions;
using LunchDelivery.Schedule;
using NUnit.Framework;
using static LunchDelivery.UnitSpecs.ObjectMother;

namespace LunchDelivery.UnitSpecs.Schedule
{
    [TestFixture]
    public class ScheduledDeliverySpecs : FeatureSpecifications
    {
        private ICollection<MovementDescription> _source;
        private CoverageChecker _coverageChecker;
        private ScheduledDelivery _result;
        private string _failureReason;
        private bool _worked;

        public override void Given()
        {
            var districtArea = new DistrictArea
            {
                BlocksWide = 3,
                BlocksHigh = 2
            };
            _coverageChecker = new CoverageChecker(districtArea, 2);
        }

        public override void When() =>
            _worked = ScheduledDelivery.TryCreateFrom(_source, _coverageChecker, out _result, out _failureReason);

        public class When_only_one_movement_description_is_provided : ScheduledDeliverySpecs
        {
            public override void Given() => 
                _source = new[] {CreateMovementDescriptionFrom("AAAAIAA")};

            [Test]
            public void Should_work() =>
                _worked.Should().BeTrue();

            [Test]
            public void Should_get_something() =>
                _result.Should().NotBeNull();

            [Test]
            public void Should_get_an_autogenerated_Id() =>
                _result.Id.Should().NotBe(Guid.Empty);

            [Test]
            public void Should_get_only_one_drone_movement() =>
                _result.DroneMovements.Count.Should().Be(1);

            [Test]
            public void Should_get_a_final_target_position() =>
                _result.FinalTargetPosition.Should().NotBeNull();

            [Test]
            public void Should_get_a_final_target_position_with_the_expected_coordinate_x() =>
                _result.FinalTargetPosition.CoordinateX.Should().Be(-2);

            [Test]
            public void Should_get_a_final_target_position_with_the_expected_coordinate_y() =>
                _result.FinalTargetPosition.CoordinateY.Should().Be(4);

            [Test]
            public void Should_get_a_final_target_position_with_the_expected_cardinal_point() =>
                _result.FinalTargetPosition.CardinalPoint.Should().Be(CardinalPoint.West);

            [Test]
            public void Should_not_get_any_failure_reason() =>
                _failureReason.Should().BeNull();
        }

        public class When_multiple_movement_descriptions_are_provided : ScheduledDeliverySpecs
        {
            public override void Given() => 
                _source = new[]
                {
                    CreateMovementDescriptionFrom("AAAAIAA"),
                    CreateMovementDescriptionFrom("DDDAIAD"),
                    CreateMovementDescriptionFrom("AAIADAD")
                };

            [Test]
            public void Should_work() =>
                _worked.Should().BeTrue();

            [Test]
            public void Should_get_something() =>
                _result.Should().NotBeNull();

            [Test]
            public void Should_get_an_autogenerated_Id() =>
                _result.Id.Should().NotBe(Guid.Empty);

            [Test]
            public void Should_get_a_drone_movement_for_each_movement_description() =>
                _result.DroneMovements.Count.Should().Be(3);

            [Test]
            public void Should_get_a_final_target_position() =>
                _result.FinalTargetPosition.Should().NotBeNull();

            [Test]
            public void Should_get_a_final_target_position_with_the_expected_coordinate_x() =>
                _result.FinalTargetPosition.CoordinateX.Should().Be(0);

            [Test]
            public void Should_get_a_final_target_position_with_the_expected_coordinate_y() =>
                _result.FinalTargetPosition.CoordinateY.Should().Be(0);

            [Test]
            public void Should_get_a_final_target_position_with_the_expected_cardinal_point() =>
                _result.FinalTargetPosition.CardinalPoint.Should().Be(CardinalPoint.West);

            [Test]
            public void Should_not_get_any_failure_reason() =>
                _failureReason.Should().BeNull();
        }

        public class When_the_first_movement_description_is_not_valid: ScheduledDeliverySpecs
        {
            public override void Given() => 
                _source = new[]
                {
                    CreateMovementDescriptionFrom("AAA%IAA"),
                    CreateMovementDescriptionFrom("DDDAIAD"),
                    CreateMovementDescriptionFrom("AAIADAD")
                };

            [Test]
            public void Should_not_work() =>
                _worked.Should().BeFalse();

            [Test]
            public void Should_not_get_anything() =>
                _result.Should().BeNull();

            [Test]
            public void Should_get_a_failure_reason() =>
                _failureReason.Should().NotBeNull();

            [Test]
            public void Should_get_a_failure_reason_telling_the_detail() =>
                _failureReason.Should().Contain("The movement description 'AAA%IAA' contain unknown characters.");
        }

        public class When_a_movement_description_in_the_middle_is_not_valid: ScheduledDeliverySpecs
        {
            public override void Given() => 
                _source = new[]
                {
                    CreateMovementDescriptionFrom("AAADIAA"),
                    CreateMovementDescriptionFrom("DDDID"),
                    CreateMovementDescriptionFrom("AAIADAD")
                };

            [Test]
            public void Should_not_work() =>
                _worked.Should().BeFalse();

            [Test]
            public void Should_not_get_anything() =>
                _result.Should().BeNull();

            [Test]
            public void Should_get_a_failure_reason() =>
                _failureReason.Should().NotBeNull();

            [Test]
            public void Should_get_a_failure_reason_telling_the_detail() =>
                _failureReason.Should().Contain("The movement description 'DDDID' has no one advance move.");
        }

        public class When_the_last_movement_description_is_not_valid: ScheduledDeliverySpecs
        {
            public override void Given() => 
                _source = new[]
                {
                    CreateMovementDescriptionFrom("DDDAIAD"),
                    CreateMovementDescriptionFrom("AAIADAD"),
                    CreateMovementDescriptionFrom("AAA%IAA")
                };

            [Test]
            public void Should_not_work() =>
                _worked.Should().BeFalse();

            [Test]
            public void Should_not_get_anything() =>
                _result.Should().BeNull();

            [Test]
            public void Should_get_a_failure_reason() =>
                _failureReason.Should().NotBeNull();

            [Test]
            public void Should_get_a_failure_reason_telling_the_detail() =>
                _failureReason.Should().Contain("The movement description 'AAA%IAA' contain unknown characters.");
        }

        public class When_a_movement_description_is_not_allowed_to_the_deliver_in_the_target_position : ScheduledDeliverySpecs
        {
            public override void Given() => 
                _source = new[]
                {
                    CreateMovementDescriptionFrom("AAADIAA"),
                    CreateMovementDescriptionFrom("AAAAAA"),
                    CreateMovementDescriptionFrom("AAIADAD")
                };

            [Test]
            public void Should_not_work() =>
                _worked.Should().BeFalse();

            [Test]
            public void Should_not_get_anything() =>
                _result.Should().BeNull();

            [Test]
            public void Should_get_a_failure_reason() =>
                _failureReason.Should().NotBeNull();

            [Test]
            public void Should_get_a_failure_reason_telling_the_detail() =>
                _failureReason.Should().Contain("The target position for the movement description 'AAAAAA' is out of the coverage area.");
        }
    }
}