// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LunchDelivery.AcceptanceSpecs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Deliver ordered lunches", Description="\tIn order to ensure the delivery of all ordered lunches\r\n\tAs the owner\r\n\tI want t" +
        "o deliver the lunches simultaneously by multiple drones", SourceFile="Features\\Delivery.feature", SourceLine=0)]
    public partial class DeliverOrderedLunchesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Delivery.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Deliver ordered lunches", "\tIn order to ensure the delivery of all ordered lunches\r\n\tAs the owner\r\n\tI want t" +
                    "o deliver the lunches simultaneously by multiple drones", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Deliver only one lunch", SourceLine=5)]
        public virtual void DeliverOnlyOneLunch()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deliver only one lunch", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Route"});
                table1.AddRow(new string[] {
                            "AAAAIAA"});
#line 7
 testRunner.Given("the owner scheduled for the day the deliveries", ((string)(null)), table1, "Given ");
#line hidden
#line 10
 testRunner.When("the ordered lunches are delivered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Delivery"});
                table2.AddRow(new string[] {
                            "(-2, 4) dirección Norte"});
#line 11
 testRunner.Then("the owner should receive a report with the deliveries", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Deliver multiple lunches in only one trip", SourceLine=14)]
        public virtual void DeliverMultipleLunchesInOnlyOneTrip()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deliver multiple lunches in only one trip", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Route"});
                table3.AddRow(new string[] {
                            "AAAAIAA"});
                table3.AddRow(new string[] {
                            "DDDAIAD"});
                table3.AddRow(new string[] {
                            "AAIADAD"});
#line 16
 testRunner.Given("the owner scheduled for the day the deliveries", ((string)(null)), table3, "Given ");
#line hidden
#line 21
 testRunner.When("the ordered lunches are delivered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Delivery"});
                table4.AddRow(new string[] {
                            "(-2, 4) dirección Norte"});
                table4.AddRow(new string[] {
                            "(-3, 3) dirección Sur"});
                table4.AddRow(new string[] {
                            "(-4, 2) dirección Oriente"});
#line 22
 testRunner.Then("the owner should receive a report with the deliveries", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Deliver requires multiple trips", SourceLine=27)]
        public virtual void DeliverRequiresMultipleTrips()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deliver requires multiple trips", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Route"});
                table5.AddRow(new string[] {
                            "AAAAIAA"});
                table5.AddRow(new string[] {
                            "DDDAIAD"});
                table5.AddRow(new string[] {
                            "AAIADAD"});
                table5.AddRow(new string[] {
                            "AAAAAAA"});
                table5.AddRow(new string[] {
                            "ADAIADA"});
                table5.AddRow(new string[] {
                            "DAAAAAA"});
#line 29
 testRunner.Given("the owner scheduled for the day the deliveries", ((string)(null)), table5, "Given ");
#line hidden
#line 37
 testRunner.When("the ordered lunches are delivered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Delivery"});
                table6.AddRow(new string[] {
                            "(-2, 4) dirección Norte"});
                table6.AddRow(new string[] {
                            "(-3, 3) dirección Sur"});
                table6.AddRow(new string[] {
                            "(-4, 2) dirección Oriente"});
                table6.AddRow(new string[] {
                            "(0, 7) dirección Norte"});
                table6.AddRow(new string[] {
                            "(2, 2) dirección Oriente"});
                table6.AddRow(new string[] {
                            "(6, 0) dirección Oriente"});
#line 38
 testRunner.Then("the owner should receive a report with the deliveries", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Some deliveries are out of reach", SourceLine=46)]
        public virtual void SomeDeliveriesAreOutOfReach()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Some deliveries are out of reach", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Route"});
                table7.AddRow(new string[] {
                            "AAAAIAA"});
                table7.AddRow(new string[] {
                            "AAAAAAAAAAA"});
                table7.AddRow(new string[] {
                            "DDDAIAD"});
                table7.AddRow(new string[] {
                            "AAIADAD"});
                table7.AddRow(new string[] {
                            "IADAIADAIADAIADAIADAIA"});
#line 48
 testRunner.Given("the owner scheduled for the day the deliveries", ((string)(null)), table7, "Given ");
#line hidden
#line 55
 testRunner.When("the ordered lunches are delivered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Delivery"});
                table8.AddRow(new string[] {
                            "(-2, 4) dirección Norte"});
                table8.AddRow(new string[] {
                            "(-3, 3) dirección Sur"});
                table8.AddRow(new string[] {
                            "(-4, 2) dirección Oriente"});
#line 56
 testRunner.Then("the owner should receive a report with the deliveries", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
